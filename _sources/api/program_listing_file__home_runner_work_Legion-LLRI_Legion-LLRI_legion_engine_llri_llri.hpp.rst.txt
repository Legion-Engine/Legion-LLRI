
.. _program_listing_file__home_runner_work_Legion-LLRI_Legion-LLRI_legion_engine_llri_llri.hpp:

Program Listing for File llri.hpp
=================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_Legion-LLRI_Legion-LLRI_legion_engine_llri_llri.hpp>` (``/home/runner/work/Legion-LLRI/Legion-LLRI/legion/engine/llri/llri.hpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   
   #pragma once
   #include <cstdint>
   #include <map>
   #include <string>
   #include <vector>
   
   #if defined(DOXY_EXCLUDE)
   
   #define LLRI_DISABLE_VALIDATION
   
   #define LLRI_DISABLE_IMPLEMENTATION_MESSAGE_POLLING
   
   #define LLRI_ENABLE_LEGION_NAMESPACING
   #undef LLRI_ENABLE_LEGION_NAMESPACING //only defined for the doxygen comments
   #endif
   
   #if defined(LLRI_ENABLE_LEGION_NAMESPACING)
   
   #define LLRI_NAMESPACE legion::graphics::llri
   #else
   
   #define LLRI_NAMESPACE llri
   #endif
   
   namespace LLRI_NAMESPACE
   {
       enum struct result : uint8_t
       {
           Success = 0,
           Timeout,
           NotReady,
           ErrorUnknown,
           ErrorInvalidUsage,
           ErrorFeatureNotSupported,
           ErrorExtensionNotSupported,
           ErrorDeviceHung,
           ErrorDeviceLost,
           ErrorDeviceRemoved,
           ErrorDriverFailure,
           ErrorOutOfHostMemory,
           ErrorOutOfDeviceMemory,
           ErrorInitializationFailed,
           ErrorIncompatibleDriver,
           MaxEnum = ErrorIncompatibleDriver
       };
   
       constexpr const char* to_string(result r);
   }
   
   // ReSharper disable CppUnusedIncludeDirective
   
   #include <llri/detail/instance.hpp>
   #include <llri/detail/instance_extensions.hpp>
   
   #include <llri/detail/adapter.hpp>
   #include <llri/detail/adapter_extensions.hpp>
   
   #include <llri/detail/device.hpp>
   
   #include <llri/detail/llri.inl>
